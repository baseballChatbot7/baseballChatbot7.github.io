I"<h1 id="elasticsearch-1">Elasticsearch-1</h1>
<h2 id="abstract">Abstract</h2>

<p>챗봇에서 질문이 들어왔을 때, 그에 대응하는 적절한 문서를 찾아줄 필요가 있습니다. 이때, 검색 엔진 오픈 소스인 Elasticsearch를 사용해서 Retrieval를 구현하려고 합니다. 여기서는 Back-End에 해당하는 내용보다는 Elasticsearch의 검색 성능을 올리기 위한 내용을 다루려고 합니다.</p>

<h2 id="setting">Setting</h2>

<p>해당 내용은 서버 상에 Elasticsearch가 설치되어 있다는 가정하에 작성되었습니다.</p>

<pre><code>!pip install elasticsearch
elasticsearch-7.12.1/bin/elasticsearch-plugin install analysis-nori # 한국어 토크나이저 설치
</code></pre>
<p>Elasticsearch를 파이썬에서 사용하기 위한 라이브러리 설치합니다. 그리고 처음에는 Elasticsearch에 한국어 토크나이저가 설치되어 있지 않습니다. 따라서, 저희가 따로 설치해줄 필요가 있습니다.</p>

<pre><code>from elasticsearch import Elasticsearch
es = Elasticsearch('localhost:9200')
print(es.info())
</code></pre>
<p>이제 파이썬에 Elasticsearch를 연결합니다. 세팅에 따라 다르겠지만, 개인 컴퓨터에서 사용한다면 ‘localhost:9200’로 연결해주시면 됩니다. 그리고 마지막의 print문이 정상적으로 출력이 되면, Elasticsearch가 정상적으로 연결된 것입니다.</p>

<pre><code>es.indices.create(index = 'document',
                  body = {
                      'settings':{
                          'analysis':{
                              'analyzer':{
                                  'my_analyzer':{
                                      "type": "custom",
                                      'tokenizer':'nori_tokenizer',
                                      'decompound_mode':'mixed',
                                      'stopwords':'_korean_',
                                      'synonyms':'_korean_',
                                      "filter": ["lowercase",
                                                 "my_shingle_f",
                                                 "nori_readingform",
                                                 "nori_number",
                                                 "cjk_bigram",
                                                 "decimal_digit",
                                                 "stemmer",
                                                 "trim"]
                                  }
                              },
                              'filter':{
                                  'my_shingle_f':{
                                      "type": "shingle"
                                  }
                              }
                          },
                          'similarity':{
                              'my_similarity':{
                                  'type':'BM25',
                              }
                          }
                      },
                      'mappings':{
                          'properties':{
                              'title':{
                                  'type':'text',
                                  'analyzer':'my_analyzer',
                                  'similarity':'my_similarity'
                              },
                              'text':{
                                  'type':'text',
                                  'analyzer':'my_analyzer',
                                  'similarity':'my_similarity'
                              }
                          }
                      }
                  }
                  )
print(es.indices.get('document'))
</code></pre>
<p>Elasticsearch에 문서를 저장할 index를 생성합니다. index는 크게 settings과 mappings로 나뉩니다. settings에는 사용한 기능들을 준비하고 mappings에는 데이터 양식을 준비합니다. 그리고 마지막의 print문이 정상적으로 출력이 되면, index 생성이 완료된 것입니다.</p>

<pre><code>
</code></pre>
:ET